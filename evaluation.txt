import numpy as np
import math
import cv2 as cv



def evaluat_error(sp, act):
    mean_data = np.mean(sp)
    std_data = np.std(act, ddof=1)
    norm_data = (sp-mean_data)/(std_data)
    kernel = cv.getGaussianKernel(11, 1.5)
    window = np.outer(kernel, kernel.transpose())
    C1 = (0.01 * 255) ** 2
    C2 = (0.03 * 255) ** 2
    mu1 = cv.filter2D(sp, -1, window)[5:-5, 5:-5]  # valid
    mu2 = cv.filter2D(act, -1, window)[5:-5, 5:-5]
    mu1_sq = mu1 ** 2
    mu2_sq = mu2 ** 2
    mu1_mu2 = mu1 * mu2
    sigma1_sq = cv.filter2D(sp ** 2, -1, window)[5:-5, 5:-5] - mu1_sq
    sigma2_sq = cv.filter2D(sp ** 2, -1, window)[5:-5, 5:-5] - mu2_sq
    sigma12 = cv.filter2D(sp * act, -1, window)[5:-5, 5:-5] - mu1_mu2
    r = np.squeeze(act)
    x = np.squeeze(sp)
    points = np.zeros(len(x))
    abs_r = np.zeros(len(x))
    abs_x = np.zeros(len(x))
    abs_r_x = np.zeros(len(x))
    abs_x_r = np.zeros(len(x))
    abs_r_x__r = np.zeros(len(x))
    for j in range(1, len(x)):
        points[j] = abs(x[j] - x[j-1])
    for i in range(len(r)):
        abs_r[i] = abs(r[i])
    for i in range(len(r)):
        abs_x[i] = abs(x[i])
    for i in range(len(r)):
        abs_r_x[i] = abs(r[i] - x[i])
    for i in range(len(r)):
        abs_x_r[i] = abs(x[i] - r[i])
    for i in range(len(r)):
        abs_r_x__r[i] = abs((r[i] - x[i]) / r[i])
    ad = ((100/len(x)) * sum(abs_r_x__r))/2
    md = (100/len(x)) * sum(abs_r_x__r)
    mase = sum(abs_r_x)/((1 / (len(x) - 1)) * sum(points))
    nae = sum(abs_r_x) / len(r)
    psnr = math.log10((abs_r**2/mase))
    ssim = ((2 * mu1_mu2 + C1) * (2 * sigma12 + C2)) / ((mu1_sq + mu2_sq + C1) *(sigma1_sq + sigma2_sq + C2))
    ncc = (1.0/(sp.size-1)) * np.sum(norm_data(sp)*norm_data(act))

    EVAL_ERR = [nae,ncc,psnr,ssim,ad,md,mase]
    return EVAL_ERR

